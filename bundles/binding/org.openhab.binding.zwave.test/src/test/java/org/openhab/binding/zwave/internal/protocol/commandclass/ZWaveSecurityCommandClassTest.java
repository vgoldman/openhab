package org.openhab.binding.zwave.internal.protocol.commandclass;

import java.io.ByteArrayOutputStream;
import java.util.Arrays;

import junit.framework.TestCase;

import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import org.openhab.binding.zwave.internal.protocol.SerialMessage;
import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageClass;
import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessagePriority;
import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageType;
import org.openhab.binding.zwave.internal.protocol.ZWaveController;
import org.openhab.binding.zwave.internal.protocol.ZWaveEndpoint;
import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveCommandClass.CommandClass;
import org.openhab.binding.zwave.internal.protocol.initialization.ZWaveNodeInitStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Dave Badia
 * @since 1.8.0
 */
public class ZWaveSecurityCommandClassTest extends TestCase {
	private static String OZW_TEST_KEY_BYTES = "0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10";
	final static Logger logger = LoggerFactory.getLogger(ZWaveSecurityCommandClassTest.class);

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		ZWaveSecureNonceTracker.USE_SECURE_CRYPTO_PRACTICES = false;
		ZWaveSecurityCommandClass.setRealNetworkKey(OZW_TEST_KEY_BYTES);
	}

	/**
0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x61, 0x78, 0xda, 0x97, 0x20, 0x30, 0x33, 0x3a, 0x35, 0x38, 0x3a, 0x31, 0x34
2015-02-10 03:58:14.858 Info, BAD iv  Packet: 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x97, 0xcf, 0x32, 0x81, 0x3b, 0xcc, 0xd1, 0x6b
	 */
	@Test
	public void testGenerateMACComplex() throws Exception {
		String dataString = "0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x5d, 0x5c, 0xa9, 0xf3, 0x20, 0x30, 0x34, 0x3a, 0x34, 0x32, 0x3a, 0x31, 0x33";
		String ivString = " 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xf3, 0x68, 0x41, 0xd7, 0x37, 0xf6, 0xa5, 0x94";
		String expectedByteString = "  0xeb, 0x3d, 0xd5, 0x8c, 0x1e, 0x4c, 0xde, 0x1e";
		byte[] data = ZWaveSecurityCommandClass.hexStringToByteArray(dataString);
		byte[] iv = ZWaveSecurityCommandClass.hexStringToByteArray(ivString);
		byte[] expectedBytes = ZWaveSecurityCommandClass.hexStringToByteArray(expectedByteString);

		ZWaveNode node = Mockito.mock(ZWaveNode.class);
		Mockito.when(node.getNodeInitializationStage()).thenReturn(ZWaveNodeInitStage.DONE); // Test with real key?
		ZWaveController controller = Mockito.mock(ZWaveController.class);
		ZWaveEndpoint endpoint = Mockito.mock(ZWaveEndpoint.class);
		ZWaveSecurityCommandClass scc = new ZWaveSecurityCommandClassWithInitialization(node, controller, endpoint);
		byte[] actualBytes = scc.generateMACComplex(data, data.length, (byte)0x01,  (byte)0x02, iv);
//		System.out.println("expected: "+Arrays.toString(expectedBytes));
//		System.out.println("actual:   "+Arrays.toString(actualBytes));
		assertTrue(Arrays.equals(expectedBytes, actualBytes));
	}

	@Test
	public void testGenerateMAC() throws Exception {
		String ciphertextString = "0x5d, 0x5c, 0xa9, ";
		String ivString = " 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xf3, 0x68, 0x41, 0xd7, 0x37, 0xf6, 0xa5, 0x94";
		String expectedByteString = "  0xeb, 0x3d, 0xd5, 0x8c, 0x1e, 0x4c, 0xde, 0x1e";
		byte[] iv = ZWaveSecurityCommandClass.hexStringToByteArray(ivString);
		byte[] ciphertext = ZWaveSecurityCommandClass.hexStringToByteArray(ciphertextString);
		byte[] expectedBytes = ZWaveSecurityCommandClass.hexStringToByteArray(expectedByteString);

		ZWaveNode node = Mockito.mock(ZWaveNode.class);
		Mockito.when(node.getNodeInitializationStage()).thenReturn(ZWaveNodeInitStage.DONE);
		Mockito.when(node.getNodeId()).thenReturn(0x02); // Test with real key?
		ZWaveController controller = Mockito.mock(ZWaveController.class);
		Mockito.when(controller.getOwnNodeId()).thenReturn(0x01);
		ZWaveEndpoint endpoint = Mockito.mock(ZWaveEndpoint.class);
		ZWaveSecurityCommandClass scc = new ZWaveSecurityCommandClassWithInitialization(node, controller, endpoint);
		byte[] actualBytes = scc.generateMAC(ZWaveSecurityCommandClass.SECURITY_MESSAGE_ENCAP, ciphertext, (byte)0x01,  (byte)0x02, iv);
//		System.out.println("expected: "+Arrays.toString(expectedBytes));
//		System.out.println("actual:   "+Arrays.toString(actualBytes));
		assertTrue(Arrays.equals(expectedBytes, actualBytes));
	}

	@Test
	/**
	 *
	 *  nfo, Network Key Packet: 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
2015-02-10 04:20:38.383 Info, AuthKey Packet: 0xc5, 0xfe, 0x1c, 0xa1, 0x7d, 0x36, 0xc9, 0x92, 0x73, 0x1a, 0x0c, 0x0c, 0x46, 0x8c, 0x1e, 0xf9
2015-02-10 04:20:38.383 Info, EncryptKey Packet: 0x0a, 0x75, 0xa5, 0x17, 0x76, 0xb2, 0x89, 0x12, 0xf3, 0xeb, 0xe5, 0xda, 0x13, 0x9f, 0x21, 0xee
	 *  Received: 0x01, 0x10, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x98, 0x80, 0x6d, 0x1d, 0xd8, 0x99, 0xff, 0x50, 0x4e, 0x00, 0x2b
2015-02-10 04:20:43.789 Detail,
2015-02-10 04:20:43.789 Info, Node002, Response RTT 1182 Average Response RTT 1181
2015-02-10 04:20:43.789 Info, Node002, Received SecurityCmd_NonceReport from node 2
2015-02-10 04:20:43.789 Info, Input Packet: Packet: 0x00, 0x98, 0x02
2015-02-10 04:20:43.789 Info, IV: Packet: 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x6d, 0x1d, 0xd8, 0x99, 0xff, 0x50, 0x4e, 0x00
2015-02-10 04:20:43.789 Info, Encrypted Output Packet: 0x80, 0x0a, 0x6e
2015-02-10 04:20:43.789 Info, Decrypted output Packet: 0x00, 0x98, 0x02
2015-02-10 04:20:43.789 Info, BAD data  Packet: 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x0a, 0x6e, 0x6d, 0x20, 0x30, 0x34, 0x3a, 0x32, 0x30, 0x3a, 0x34, 0x33
2015-02-10 04:20:43.789 Info, BAD iv  Packet: 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x6d, 0x1d, 0xd8, 0x99, 0xff, 0x50, 0x4e, 0x00
2015-02-10 04:20:43.789 Error, Node002, BAD length: 22
2015-02-10 04:20:43.789 Info, Raw Auth (minus IV) Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e
015-02-10 04:20:43.789 Info, BAD tmp1  Packet: 0x78, 0xc6, 0x6e, 0x5f, 0x98, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.789 Info, BAD prexor2 tmp  Packet: 0x78, 0xc6, 0x6e, 0x5f, 0x98, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.789 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.789 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc6, 0x6e, 0x5f, 0x98, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.789 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.789 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6e, 0x5f, 0x98, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.789 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.789 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5f, 0x98, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.789 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.789 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x98, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.789 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x65, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xc2, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD prexor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD prexor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, BAD postxor2 tmp  Packet: 0xf9, 0xc7, 0x6c, 0x5c, 0x18, 0x6f, 0xac, 0xf1, 0xc3, 0xef, 0xdb, 0x66, 0xf5, 0xb2, 0x2d, 0xdd
2015-02-10 04:20:43.790 Info, BAD postxor2 encpck  Packet: 0x81, 0x01, 0x02, 0x03, 0x80, 0x0a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-10 04:20:43.790 Info, Computed Auth Packet: 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71
2015-02-10 04:20:43.790 Info, Auth Packet: 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71
2015-02-10 04:20:43.791 Info, Outgoing Packet: 0x01, 0x00, 0x00, 0x13, 0x02, 0x16, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x0a, 0x6e, 0x6d, 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71, 0x25
2015-02-10 04:20:43.791 Detail, Node002, Queuing (Security) SecurityCmd_MessageEncap (SecurityCmd_SupportedGet) (Node=2): 0x01, 0x1d, 0x00, 0x13, 0x02, 0x16, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x0a, 0x6e, 0x6d, 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71, 0x25, 0x05, 0xd5 * @throws Exception
	 */
	public void testEncapsulatePayload() throws Exception {
		//  Received: 0x01, 0x10, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x98, 0x80, 0xc8, 0xba, 0x94, 0xd3, 0xb4, 0x84, 0xc5, 0xaf, 0x94
		String nonceReportString = "0x01, 0x10, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x98, 0x80, 0x6d, 0x1d, 0xd8, 0x99, 0xff, 0x50, 0x4e, 0x00, 0x2b";
		//  Auth Packet: 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71
		// Outgoing Packet: 0x01, 0x00, 0x00, 0x13, 0x02, 0x16, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x0a, 0x6e, 0x6d, 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71, 0x25
		String expectedByteString = "0x01, 0x00, 0x00, 0x13, 0x02, 0x16, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x80, 0x0a, 0x6e, 0x6d, 0xd9, 0x5a, 0xc6, 0xf8, 0xa7, 0x0a, 0xe1, 0x71, 0x25";
		// The header and footer data we see in OZW log is different than what we capture from OpenHab, so factor out the difference
		// remove the 1st 5 hex and
		byte[] expectedBytes = ZWaveSecurityCommandClass.hexStringToByteArray(expectedByteString.substring(26, 170));

		// Setup - create a SerialMessage to be encrypted
		byte SECURITY_COMMANDS_SUPPORTED_GET = 0x02;
		byte nodeId = 0x00;
		SerialMessage messageToEncapsulate = new SerialMessage(nodeId, SerialMessageClass.SendData,
				SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.High);
		byte[] payload = {
				(byte) nodeId,
				2,
				(byte) CommandClass.SECURITY.getKey(),
				SECURITY_COMMANDS_SUPPORTED_GET,
		};
		messageToEncapsulate.setMessagePayload(payload);

		// Create the security class
		ZWaveNode node = Mockito.mock(ZWaveNode.class);
		Mockito.when(node.getNodeInitializationStage()).thenReturn(ZWaveNodeInitStage.DONE); // Test with real key?
		Mockito.when(node.getNodeId()).thenReturn(0x02); // Test with real key?

		ZWaveController controller = Mockito.mock(ZWaveController.class);
		Mockito.when(controller.getOwnNodeId()).thenReturn(0x01);
		ZWaveEndpoint endpoint = Mockito.mock(ZWaveEndpoint.class);
		ZWaveSecurityCommandClass scc = new ZWaveSecurityCommandClassWithInitialization(node, controller, endpoint);

		scc.queueMessageForEncapsulationAndTransmission(messageToEncapsulate);
		// Trigger the encapsulation by sending  byte SECURITY_NONCE_REPORT = (byte) 0x80;
		SerialMessage nonceReportMessage = new SerialMessage(ZWaveSecurityCommandClass.hexStringToByteArray(nonceReportString));
		scc.handleApplicationCommandRequest(nonceReportMessage, 4, 1);

		Thread.sleep(500); // Let the nonceReportMessage trigger the encapsulate and sending of the supported get message

		ArgumentCaptor<SerialMessage> captor = ArgumentCaptor.forClass(SerialMessage.class);
		Mockito.verify(controller, Mockito.times(2)).sendData(captor.capture());
		SerialMessage outgoingMesage = captor.getValue();
		byte[] resultBytes = outgoingMesage.getMessagePayload();

//		System.out.println(toHex("expected" ,expectedBytes));
//		System.out.println(toHex("actual", resultBytes));
		assertTrue(Arrays.equals(expectedBytes, resultBytes));
	}

	/**
	 *
	 *
2015-02-16 19:37:11.288 Info, Node002, Response RTT 1179 Average Response RTT 4119
2015-02-16 19:37:11.288 Info, Node002, Received SecurityCmd_SchemeReport from node 2: 0
2015-02-16 19:37:11.288 Info, Node002,     Security scheme agreed.
2015-02-16 19:37:11.288 Info, Starting SecurityMsg with buffer Packet: 0x01, 0x19, 0x00, 0x13, 0x02, 0x12, 0x98, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x25, 0x08, 0x46
2015-02-16 19:37:11.288 Info, Final payload in SecurityMsg Packet: 0x98, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
2015-02-16 19:37:11.288 Detail, Node002, Queuing (Security) SecurityCmd_NonceGet (Node=2): 0x01, 0x09, 0x00, 0x13, 0x02, 0x02, 0x98, 0x40, 0x05, 0x09, 0x31
2015-02-16 19:37:11.288 Detail, Node002,   Expected reply and command class was received
2015-02-16 19:37:11.288 Detail, Node002,   Message transaction complete
2015-02-16 19:37:11.288 Detail,
2015-02-16 19:37:11.288 Detail, Node002, Removing current message
2015-02-16 19:37:11.288 Detail,
2015-02-16 19:37:11.288 Info, Node002, Sending (Security) message (Callback ID=0x09, Expected Reply=0x04) - SecurityCmd_NonceGet (Node=2): 0x01, 0x09, 0x00, 0x13, 0x02, 0x02, 0x98, 0x40, 0x05, 0x09, 0x31
2015-02-16 19:37:11.293 Detail, Node002,   Received: 0x01, 0x04, 0x01, 0x13, 0x01, 0xe8
2015-02-16 19:37:11.293 Detail, Node002,   ZW_SEND_DATA delivered to Z-Wave stack
2015-02-16 19:37:12.460 Detail, Node002,   Received: 0x01, 0x05, 0x00, 0x13, 0x09, 0x00, 0xe0
2015-02-16 19:37:12.460 Detail, Node002,   ZW_SEND_DATA Request with callback ID 0x09 received (expected 0x09)
2015-02-16 19:37:12.461 Info, Node002, Request RTT 1172 Average Request RTT 1343
2015-02-16 19:37:12.471 Detail, Node002,   Received: 0x01, 0x10, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x98, 0x80, 0x96, 0x9b, 0x94, 0xea, 0xe8, 0x64, 0x43, 0x8b, 0xcc
2015-02-16 19:37:12.471 Detail,
2015-02-16 19:37:12.472 Info, Node002, Response RTT 1183 Average Response RTT 2651
2015-02-16 19:37:12.472 Info, Node002, Received SecurityCmd_NonceReport from node 2
2015-02-16 19:37:12.472 Info, Security Payload: Packet: 0x98, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
2015-02-16 19:37:12.472 Info, IV: Packet: 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x96, 0x9b, 0x94, 0xea, 0xe8, 0x64, 0x43, 0x8b
2015-02-16 19:37:12.472 Info, Input Packet: Packet: 0x00, 0x98, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10
2015-02-16 19:37:12.472 Info, Encrypted Output Packet: 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7
2015-02-16 19:37:12.472 Info, Encrypted Output2 Packet: 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7
2015-02-16 19:37:12.472 Info, msg->GetBuffer() Packet: 0x01, 0x00, 0x00, 0x13, 0x02, 0x26, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
2015-02-16 19:37:12.472 Warning, Node002, msg->GetLength()=36
2015-02-16 19:37:12.472 Info, msg getbuffer7 Packet: 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x96, 0x74, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x4e, 0x6f, 0x64
2015-02-16 19:37:12.472 Info, BAD data  Packet: 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x96, 0x74, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x4e, 0x6f, 0x64
2015-02-16 19:37:12.472 Info, BAD iv  Packet: 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x96, 0x9b, 0x94, 0xea, 0xe8, 0x64, 0x43, 0x8b
2015-02-16 19:37:12.472 Error, Node002, BAD length: 38
2015-02-16 19:37:12.472 Info, Raw Auth (minus IV) Packet: 0x81, 0x01, 0x02, 0x13, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7
2015-02-16 19:37:12.472 Info, BAD tmp1  Packet: 0xb4, 0x19, 0x96, 0xe1, 0x28, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0xb4, 0x19, 0x96, 0xe1, 0x28, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x81, 0x01, 0x02, 0x13, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x19, 0x96, 0xe1, 0x28, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x01, 0x02, 0x13, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x96, 0xe1, 0x28, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x02, 0x13, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xe1, 0x28, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x13, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x28, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0xab, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x45, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0x9f, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x99, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0xcd, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0xe7, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.472 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.472 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0x42, 0x4f, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.473 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.473 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0x42, 0x69, 0x67, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.473 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.473 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0x42, 0x69, 0x3b, 0x23, 0x13, 0xbf
2015-02-16 19:37:12.473 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x8c, 0xa7
2015-02-16 19:37:12.473 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0x42, 0x69, 0x3b, 0x5b, 0x13, 0xbf
2015-02-16 19:37:12.473 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xa7
2015-02-16 19:37:12.473 Info, BAD prexor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0x42, 0x69, 0x3b, 0x5b, 0x9f, 0xbf
2015-02-16 19:37:12.473 Info, BAD prexor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7
2015-02-16 19:37:12.473 Info, BAD postxor tmp  Packet: 0x35, 0x18, 0x94, 0xf2, 0x54, 0x8d, 0x59, 0xb5, 0x83, 0x07, 0x42, 0x69, 0x3b, 0x5b, 0x9f, 0x18
2015-02-16 19:37:12.473 Info, BAD postxor encpck  Packet: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD tmp2  Packet: 0x4d, 0xa3, 0xcb, 0x6c, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD afterxor tempAuth Packet: 0x4d, 0xa3, 0xcb, 0x6c, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD afterxor encpck Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0x4d, 0xa3, 0xcb, 0x6c, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xa3, 0xcb, 0x6c, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xcb, 0x6c, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0x6c, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x9c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0xbe, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x4c, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.473 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.473 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.474 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.474 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.474 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.474 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.474 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.474 Info, BAD prexor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.474 Info, BAD prexor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.474 Info, BAD postxor2 tmp  Packet: 0xd6, 0xf9, 0xd0, 0xe3, 0x6c, 0x4f, 0x9b, 0x70, 0xc0, 0x9e, 0x49, 0xd6, 0x24, 0x67, 0x92, 0x51
2015-02-16 19:37:12.474 Info, BAD postxor2 encpck  Packet: 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
2015-02-16 19:37:12.474 Detail, Node002, Queuing (Security) SecurityCmd_MessageEncap (SecurityCmd_NetworkKeySet) (Node=2): 0x01, 0x2d, 0x00, 0x13, 0x02, 0x26, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x96, 0x25, 0xb7, 0x8c, 0x11, 0x67, 0x64, 0x89, 0xc5, 0x25, 0x0a, 0xb6
2015-02-16 19:37:12.474 Info, Node002, Reseting Network Key after Inclusion
2015-02-16 19:37:12.474 Info, Node002,   Using Configured Network Key (AddingNode: true KeySet: true)
2015-02-16 19:37:12.474 Info, AuthKey Packet: 0xc5, 0xfe, 0x1c, 0xa1, 0x7d, 0x36, 0xc9, 0x92, 0x73, 0x1a, 0x0c, 0x0c, 0x46, 0x8c, 0x1e, 0xf9
2015-02-16 19:37:12.474 Info, EncryptKey Packet: 0x0a, 0x75, 0xa5, 0x17, 0x76, 0xb2, 0x89, 0x12, 0xf3, 0xeb, 0xe5, 0xda, 0x13, 0x9f, 0x21, 0xee
2015-02-16 19:37:12.474 Detail, Node002,   Expected reply and command class was received
2015-02-16 19:37:12.474 Detail, Node002,   Message transaction complete
2015-02-16 19:37:12.474 Detail,
2015-02-16 19:37:12.474 Detail, Node002, Removing current message
2015-02-16 19:37:12.474 Detail,
2015-02-16 19:37:12.474 Info, Node002, Sending (Security) message (Callback ID=0x0a, Expected Reply=0x04) - SecurityCmd_MessageEncap (SecurityCmd_NetworkKeySet) (Node=2): 0x01, 0x2d, 0x00, 0x13, 0x02, 0x26, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x96, 0x25, 0xb7, 0x8c, 0x11, 0x67, 0x64, 0x89, 0xc5, 0x25, 0x0a, 0xb6
2015-02-16 19:37:12.482 Detail, Node002,   Received: 0x01, 0x04, 0x01, 0x13, 0x01, 0xe8
2015-02-16 19:37:12.482 Detail, Node002,   ZW_SEND_DATA delivered to Z-Wave stack
2015-02-16 19:37:13.656 Detail, Node002,   Received: 0x01, 0x05, 0x00, 0x13, 0x0a, 0x00, 0xe3
	 * @param byteString
	 * @return
	 */
	public void testEncapsulateBigPayload() throws Exception {
		String nonceReportString = "0x01, 0x10, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x98, 0x80, 0x96, 0x9b, 0x94, 0xea, 0xe8, 0x64, 0x43, 0x8b, 0xcc";
		String expectedByteString = "0x01, 0x2d, 0x00, 0x13, 0x02, 0x26, 0x98, 0x81, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x7c, 0x26, 0x1c, 0x2a, 0x1a, 0xca, 0xa5, 0x26, 0x5c, 0x78, 0x8c, 0xa7, 0x9b, 0x5a, 0x1b, 0x8f, 0xf0, 0xf1, 0xd7, 0x96, 0x25, 0xb7, 0x8c, 0x11, 0x67, 0x64, 0x89, 0xc5, 0x25, 0x0a, 0xb6";
		// The header and footer data we see in OZW log is different than what we capture from OpenHab, so factor out the difference
		int expectedByteStringLength = expectedByteString.length();
		byte[] expectedBytes = ZWaveSecurityCommandClass.hexStringToByteArray(expectedByteString.substring(26, expectedByteStringLength - 16));

		// Scheme0 network key is a key of all zeros
		ZWaveSecurityCommandClass.setRealNetworkKey("0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00");

		// Setup - create a SerialMessage to be encrypted
		byte SECURITY_NETWORK_KEY_SET = 0x06;
		byte nodeId = 0x00;
		SerialMessage messageToEncapsulate = new SerialMessage(nodeId, SerialMessageClass.SendData,
				SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.High);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		baos.write((byte) nodeId);
		baos.write(18);
		baos.write((byte) CommandClass.SECURITY.getKey());
		baos.write(SECURITY_NETWORK_KEY_SET);
		baos.write(ZWaveSecurityCommandClass.hexStringToByteArray("0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10"));
		messageToEncapsulate.setMessagePayload(baos.toByteArray());

		// Create the security class
		ZWaveNode node = Mockito.mock(ZWaveNode.class);
		Mockito.when(node.getNodeInitializationStage()).thenReturn(ZWaveNodeInitStage.DETAILS); // Force use of scheme0 key
		Mockito.when(node.getNodeId()).thenReturn(0x02);

		ZWaveController controller = Mockito.mock(ZWaveController.class);
		Mockito.when(controller.getOwnNodeId()).thenReturn(0x01);
		ZWaveEndpoint endpoint = Mockito.mock(ZWaveEndpoint.class);
		ZWaveSecurityCommandClass scc = new ZWaveSecurityCommandClassWithInitialization(node, controller, endpoint);

		scc.queueMessageForEncapsulationAndTransmission(messageToEncapsulate);
		// Trigger the encapsulation by sending  byte SECURITY_NONCE_REPORT = (byte) 0x80;
		SerialMessage nonceReportMessage = new SerialMessage(ZWaveSecurityCommandClass.hexStringToByteArray(nonceReportString));
		scc.handleApplicationCommandRequest(nonceReportMessage, 4, 1);

		Thread.sleep(500); // Let the nonceReportMessage trigger the encapsulate and sending of the supported get message

		ArgumentCaptor<SerialMessage> captor = ArgumentCaptor.forClass(SerialMessage.class);
		Mockito.verify(controller, Mockito.times(2)).sendData(captor.capture());
		SerialMessage outgoingMesage = captor.getValue();
		byte[] actualBytes = outgoingMesage.getMessagePayload();

//		System.out.println(toHex("expected" ,expectedBytes));
//		System.out.println(toHex("actual", actualBytes));
		assertTrue(Arrays.equals(expectedBytes, actualBytes));
	}

	/**
18:30:35.236 [ZWaveSendThread] [DEBUG] [WaveController$ZWaveSendThread:1391 ] - NODE 255: Response processed after 6ms/3642ms.
18:30:35.358 [ZWaveReceiveThread] [INFO ] [eController$ZWaveReceiveThread:1563 ] - Receive Message = 01 1D 00 04 00 02 17 98 81 D2 51 75 6A BF 39 4C 02 59 84 25 B9 AA 53 B1 8A 32 CD B8 29 7C 2F
18:30:35.359 [ZWaveReceiveThread] [DEBUG] [eController$ZWaveReceiveThread:1473 ] - Receive queue ADD: Length=1
18:30:35.359 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:1223 ] - Receive queue TAKE: Length=0
18:30:35.359 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:1224 ] - Process Message = 01 1D 00 04 00 02 17 98 81 D2 51 75 6A BF 39 4C 02 59 84 25 B9 AA 53 B1 8A 32 CD B8 29 7C 2F
18:30:35.360 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:198  ] - Message: class = ApplicationCommandHandler (0x04), type = Request (0x00), payload = 00 02 17 98 81 D2 51 75 6A BF 39 4C 02 59 84 25 B9 AA 53 B1 8A 32 CD B8 29 7C
18:30:35.360 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:695  ] - Notifying event listeners of org.openhab.binding.zwave.internal.protocol.event.ZWaveNodeStatusEvent@5bf51941
18:30:35.360 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:680  ] - Enqueueing message. Queue length = 1
18:30:35.360 [ZWaveSendThread] [DEBUG] [WaveController$ZWaveSendThread:1275 ] - Took message from queue for sending. Queue length = 0
18:30:35.361 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:754  ] - NODE 2: Node Status event - Node is DEAD
18:30:35.361 [ZWaveSendThread] [INFO ] [WaveController$ZWaveSendThread:1332 ] - NODE 255: Sending REQUEST Message = 01 04 00 62 02 9B
18:30:35.361 [ZWaveInputThread] [INFO ] [.p.c.ZWaveSecurityCommandClass:545  ] - NODE 2: Encrypted Packet Sizes: total=22, encrypted=4
18:30:35.362 [ZWaveInputThread] [DEBUG] [.p.c.ZWaveSecurityCommandClass:1281 ] - IV=0xd2, 0x51, 0x75, 0x6a, 0xbf, 0x39, 0x4c, 0x02, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
18:30:35.362 [ZWaveInputThread] [DEBUG] [.p.c.ZWaveSecurityCommandClass:1281 ] - macFromPacket=0x53, 0xb1, 0x8a, 0x32, 0xcd, 0xb8, 0x29, 0x7c,
18:30:35.363 [ZWaveInputThread] [DEBUG] [.p.c.ZWaveSecurityCommandClass:1083 ] - NODE 8: Raw Auth (Minus IV) Size:24 ({})
18:30:35.363 [ZWaveInputThread] [DEBUG] [.p.c.ZWaveSecurityCommandClass:576  ] - NODE 2: MAC Authentication of packet verified OK
18:30:35.364 [ZWaveInputThread] [DEBUG] [.p.c.ZWaveSecurityCommandClass:600  ] - NODE 2: decrypted bytes 00 80 03 50
18:30:35.364 [ZWaveInputThread] [DEBUG] [b.z.i.protocol.ZWaveController:695  ] - Notifying event listeners of org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent@6a046ea2
18:30:35.365 [ZWaveReceiveThread] [INFO ] [eController$ZWaveReceiveThread:1563 ] - Receive Message = 01 04 01 62 01 99
18:30:35.365 [ZWaveReceiveThread] [DEBUG] [eController$ZWaveReceiveThread:1473 ] - Receive queue ADD: Length=1
	 * @throws Exception
	 */
	public void offtestDecryptPayload() throws Exception {
		// Setup
		ZWaveSecurityCommandClass.setRealNetworkKey("0xF2, 0x21, 0x4A, 0x79, 0x93, 0xBD, 0xD7, 0xF6, 0xAA, 0xB6, 0x11, 0x2C, 0x5A, 0xAE, 0x23, 0xB3");
		String receivedByteString = "01 1D 00 04 00 02 17 98 81 D2 51 75 6A BF 39 4C 02 59 84 25 B9 AA 53 B1 8A 32 CD B8 29 7C 2F ";
		byte[] receivedBytes = ZWaveSecurityCommandClass.hexStringToByteArray(receivedByteString);
		String expectedByteString = "0x00, 0x98, 0x07";
		byte[] expectedBytes = ZWaveSecurityCommandClass.hexStringToByteArray(expectedByteString);
		// Create the security class
		ZWaveNode node = Mockito.mock(ZWaveNode.class);
		Mockito.when(node.getNodeInitializationStage()).thenReturn(ZWaveNodeInitStage.DONE);
		Mockito.when(node.getNodeId()).thenReturn(0x02);
		ZWaveController controller = Mockito.mock(ZWaveController.class);
		Mockito.when(controller.getOwnNodeId()).thenReturn(0x01);
		ZWaveEndpoint endpoint = Mockito.mock(ZWaveEndpoint.class);
		ZWaveSecurityCommandClass scc = new ZWaveSecurityCommandClassWithInitialization(node, controller, endpoint);
		// This will force the generation of a nonce with all 0xaa when we call scc.sendNonceReport()
		ZWaveSecureNonceTracker.USE_SECURE_CRYPTO_PRACTICES = false;
		// Test MAC verify by setting DROP_PACKETS_ON_MAC_FAILURE to true
		ZWaveSecurityCommandClass.DROP_PACKETS_ON_MAC_FAILURE = true;
//		scc.sendNonceReport();  TODO: what was this for?

		// Execute
		byte[] result = scc.decryptMessage(receivedBytes, 9);

		// Test
		assertNotNull("MAC verify probably failed", result);
//		System.out.println(toHex("actual", result));
		assertTrue(Arrays.equals(expectedBytes, result));
	}

	public void testHexStringToByteArray1() throws Exception {
		String hexString = "0xF2, 0x21, 0x4A, 0x79, 0x93, 0xBD, 0xD7, 0xF6, 0xAA, 0xB6, 0x11, 0x2C, 0x5A, 0xAE, 0x23, 0xB3";
		byte[] result = ZWaveSecurityCommandClass.hexStringToByteArray(hexString);
		byte[] expected = {-14, 33, 74, 121, -109, -67, -41, -10, -86, -74, 17, 44, 90, -82, 35, -77};
		assertEquals(Arrays.toString(expected), Arrays.toString(result));
	}

	public void testHexStringToByteArray2() throws Exception {
		String hexString = "F2, 21, 4A, 79, 93, BD, D7, F6, AA, B6, 11, 2C, 5A, AE, 23, B3";
		byte[] result = ZWaveSecurityCommandClass.hexStringToByteArray(hexString);
		byte[] expected = {-14, 33, 74, 121, -109, -67, -41, -10, -86, -74, 17, 44, 90, -82, 35, -77};
		assertEquals(Arrays.toString(expected), Arrays.toString(result));
	}

	public void testHexStringToByteArray3() throws Exception {
		String hexString = "F2,21,4A,79,93,BD,D7,F6,AA,B6,11,2C,5A,AE,23,B3";
		byte[] result = ZWaveSecurityCommandClass.hexStringToByteArray(hexString);
		byte[] expected = {-14, 33, 74, 121, -109, -67, -41, -10, -86, -74, 17, 44, 90, -82, 35, -77};
		assertEquals(Arrays.toString(expected), Arrays.toString(result));
	}

	public void testHexStringToByteArray4() throws Exception {
		String hexString = "F2214A7993BDD7F6AAB6112C5AAE23B3";
		byte[] result = ZWaveSecurityCommandClass.hexStringToByteArray(hexString);
		byte[] expected = {-14, 33, 74, 121, -109, -67, -41, -10, -86, -74, 17, 44, 90, -82, 35, -77};
		assertEquals(Arrays.toString(expected), Arrays.toString(result));
	}
}
